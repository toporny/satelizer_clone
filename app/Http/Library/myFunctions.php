<?php
namespace App\Http\library;
use Config;
{

	class myFunctions {

		//private $waitingStatusToo = 1; // means let system show also waiting status domain
		// public function __CONSTRUCT() {
		// 	//$this->oTransactionDomains = $this->getDomainsFromTransactions();
		// }

		
		public function getNameOfUnknownWordsTable($user_id) {
        ($user_id >= 1000) ? $dictTableIndex = (substr("$user_id", -4, 1)) : $dictTableIndex = 0;
        $unknown_words_table = 'unknown_words_'.$dictTableIndex .'k';
        return $unknown_words_table;
		}


		public function getDictTable($language) {
				$dict_tables = Config::get('laravel_generated.dict_tables');
				if (isset($dict_tables[$language])) {
					return $dict_tables[$language] ;
				}
				else return false;
		}

		public function isSupportedLanugage ($language) {
				$dict_tables = Config::get('laravel_generated.dict_tables');
				if (isset($dict_tables[$language])) {
					return true ;
				}
				else return false;
		}

		public function getLanguageId ($language) {
				$languages_id_tables = Config::get('laravel_generated.languages_id');
				if (isset($languages_id_tables[$language])) {
					return $languages_id_tables[$language];
				}
				else return false;
		}


		public function generateConfigFiles() {
				// Two files. Two steps to make:
				// 1. step1 /app/configs/generated_by_laravel.js
			  // 2. step2 /config/laravel_generated.php

				// 1. step1 GENERATE FILE /app/configs/generated_by_laravel.js
        $results = \DB::table('available_dictionaries')
                ->select('id','language_id', 'language_name', 'count_words', 'free_words_for_not_premium_users', 'available_languages')
                ->get();

        $string = '';
        foreach ($results as $item) {
        $string .= "      '".$item->language_id."':{'id': '".$item->id."','count_words': '".$item->count_words."', 'free_words_for_not_premium_users': '".$item->free_words_for_not_premium_users."', 'language_name': '".$item->language_name."', 'available_languages':  ".$item->available_languages." },\n";
        }
 

$file1 = <<<END1
(function() {
    // this file is automaticaly generated everytime GET request for this url:
    // http://localhost:3000/api/generate_config_files
    angular
    .module('MyApp')
    .constant('availableDictionaries', {

END1;

$file2 = <<<END2
    })

END2;
$file2 .= "    .constant('maxWordsPerPage', ".Config::get('app.records_on_page').")\n";
$file2 .= "    .constant('apiUrl', '".Config::get('app.apiUrl')."');\n";

$file3 = <<<END3

})();
END3;
        $return = file_put_contents(public_path().'/app/configs/generated_by_laravel.js', $file1 . $string . $file2. $file3);

				// 2. step2 GENERATE FILE /app/configs/generated_by_laravel.js


        $results = \DB::table('available_dictionaries')
                ->select('id','language_id', 'language_name', 'count_words', 'free_words_for_not_premium_users', 'available_languages')
                ->get();


$supported_languages = "";

$dict_tables = "";
$languages_id = "";


foreach ($results as $item) {
	$supported_languages .= "'".$item->language_id. "',\n";
	$dict_tables  .= "'".$item->language_id."' => 'dictionary_".substr($item->language_id,0,2). "',\n";
	$languages_id .= "'".$item->language_id."' => '".$item->id. "',\n";
}



$laravel_generated = <<<LARAVEL_GENERATED
<?php
// this file is generated by 
// http://localhost:3000/api/generate_config_files

// TODO: REMOVE supported_languages IN future


return [
	
	'supported_languages' => [
%_supported_languages_%
	],

	'dict_tables' => [
%_dict_tables_%
	],

	'languages_id' => [
%_languages_id_%
		]

];
LARAVEL_GENERATED;


				$laravel_generated = str_replace('%_supported_languages_%', $supported_languages, $laravel_generated);
				$laravel_generated = str_replace('%_dict_tables_%', $dict_tables, $laravel_generated);
				$laravel_generated = str_replace('%_languages_id_%', $languages_id, $laravel_generated);

        $return = file_put_contents(config_path().'/laravel_generated.php', $laravel_generated);

        return true;


		}

	}
}
